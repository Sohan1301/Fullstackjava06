Adv Java:(J2EE)
=========
in J2EE to develop web appn by usnig following API's
	1.jdbc API
	2.servlet API
	3.jsp API

MVC Architecture:
	Model layer is implemented by jdbc API
	View layer is implemented by jsp API
	Controller layer is implemented by Servlet API
________________________________________________________
Java Frameworks:
===========
1.Hibernate 	Framework ( Data Base connec+Perform CRUD)
2.Spring 	Framework : (Web application)
3.Spring Boot 	Framework: (Web application+Rest Full  services)

MVC Architecture:
----------------
Hibernate 	Framework  is used to implemented Model layer. (Model)
Spring & Spring Boot Frameworks are used to implement 3 layers. (MVC)
--------------------------------------------------------------------------------------------------------------
Hibernate
----------------
What is Hibernate  
+++++++++++++++++++++
Hibernate Introduction
----------------------


Draw Backs of JDBC:
++++++++++++++++++++

--> In JDBC, if we open a database connection we need to write in try, 
and if any 
exceptions occurred catch block will takers about it, and finally used to close 
the connections.

--> here as a programmer we must close the connection, or we may 
get a chance to get our of connections message…!.

--> Actually if we didn’t close the connection in the finally block, 
then jdbc doesn’t responsible to close that connection.

--> In JDBC we need to write Sql commands in various places, 
after the program has created 
if the table structure is modified then the JDBC program doesn’t 
work, again we need to 
modify and compile and re-deploy required, which is tedious.


--> JDBC used to generate database related error codes 
if an exception will occurs, but 
java programmers are unknown about this error codes right.

--> In the Enterprise applications, the data flow 
with in an application from class to 
class will be in the form of objects, 
but while storing data finally in a database 
using JDBC then that object will be converted into text.
Because JDBC doesn’t transfer objects directly.

In order to overcome above problems,  Hibernate came into picture..!.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

What is Hibernate:
++++++++++++++++++
--> Hibernate is the ORM tool given to transfer the 
data between a java (object) application 
and a database (Relational) in the form of the objects. 
 
--> Hibernate is the open source light 
weight tool given by Gavin King.

--> Hibernate is a non-invasive framework,  
means it wont forces the programmers to 
extends/implement any class/interface,
 --> and in hibernate we have all POJO 
classes so its light weight.

POJO stands: for plain old java object:
POJI: stands for plain old java interface

--> Hibernate can runs with in or with out server, 
i mean it will suitable for all types of java applications 
(stand alone or desktop or any servlets and jsp appn.).

--> Hibernate is purely for persistence 
(to store/retrieve data from Database).

Hibernate persistence methods are
-------------------------------------------
1. session.save(object)  --> create, insert and update
2. session.update(object)  ---> update
3. session.delete(object) --> delete
4. session.load(object) ---> select
5. session.get(object)-->  select 
=======================================
every hibernate project required files are
---------------------------------------------------------------
1. POJO class (.java) extention
2. configuration files 
     here we can do configuration in 2 ways 
        a) by using .xml file
        b) by using annotation  (********)
3. hibernate mapping file (.xml ) file  
4. TestClass.java   (main{......................})
-----------------------------------------------------------------------
Preparation of POJO class
---------------------------------------
-> POJO stands for plain old java objects
--> the purpose of pojo is reuseability and readability of programmer
rules of pojo class
-------------------------------
1. class must be public
2. all instance variables are private 
3. must having a default constructor
4. may or may not parametrazied constructor
5. must required all public settres methods and getters methods.
6. our pojo class won't force you extends and implements 
with predefined classes and interfaces.
==============================================================

ex:
---

public class Employee
{
private int id;
private String name;
private String password;
//PDC+PSM+PGM
Employee()
{
}
public void setId(int id)
{
this.id=id;
}
public void setName(String name)
{
this.name=name;
}
public void setPassword(String password)
{
this.password=password;
}
public int getId()
{
return id;
}
public String getName()
{
return name;
}
public String getPassword()
{
return password;
}
}

================================================
Preparation of hibernate mapping  file
--------------------------------------------------------------------------------
Mapping:
----------
--> Mapping file is the heart of hibernate application.
--> Every ORM tool needs this mapping, mapping is the mechanism of placing an object 
properties into column’s of a table.
--> Mapping can be given to an ORM tool either in the form of an XML or 
in the form of the annotations.

mapping can do in hibernate 2 ways
a). by using .xml file
b) by using annotations

-->The mapping file contains mapping from a pojo(model) class name to a table name and 
pojo class variable names to table column names.

--> While writing an hibernate application, we can construct one or more mapping files, 
mean a hibernate application can contain any number of  mapping files.

Syntax Of Mapping xml:
++++++++++++++++++++++++
Employee.xml
------------------------
<hibernate-mapping>

<class name="POJO class name" table="table name in database">
<id name="variable name" column="column name in database" 
type="java/hibernate type" />

<property name="variable1 name" column="column name in database" 
type="java/hibernate type" />

<property name="variable2 name" column="column name in database" 
type="java/hibernate type" />
</class>

</hibernate-mapping>
==========================================================

























