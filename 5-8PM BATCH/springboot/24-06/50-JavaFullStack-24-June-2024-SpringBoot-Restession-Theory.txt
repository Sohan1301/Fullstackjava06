1. what is spring boot
2. features of spring boot?
3. difference between spring ad spring boot?
4.purpose of @SpringBootApplication Annotation?
5. purpose @ResponseBody annotation
6. purpose @RequestMapping annotation
7. purpose of @RequestParam annoation
8. purpose of @ModelAttribute
9. @PathVariables
-------------------------------------------------------------------------------
Spring Boot
----------
What is Spring Boot?
------------------------
Spring Boot is a popular, Java Framework, 
 open source,ligth weight,enterprise-level framework for 
creating standalone, production-grade applications that 
run on the Java Virtual Machine (JVM).

Java Spring Boot (Spring Boot) is a tool that 
makes developing web application 
and microservices (REST API's) with 
Spring  boot Framework. 





Feautures fo Spring Boot
--------
1. spring boot having autoconfiguration.
2. embeded tomcat and jetty servers.
3. embeded H2 data base for testing purpose.
4. manully not add to dependecines/starters.
5. no configuration means no .xml file.
use only annotations.
6. we can add any 3rd party  dependecies easily
 .i.e swagger,docker,postman.
-------------------------------------------------
2. what is different between spring and spring boot
---------------------------------------------------
1. dev web appn                  sb dev web appn +rest api
2. .xml,.java,anno               auto config ,annotations
3. to web appn in spring    3. no xml file
.xml (descripter)

4. tom cat                         4. embed tom cat
5. external DB                   5. H2 db 
7. manullay adding           automatically
jara
=======================================










3. why @SpringBootApplication (IOC+IOC-LifeCycle+DI)
==================================
-->The entry point of the Spring Boot Application 
is the class contains @SpringBootApplication annotation. 
This class should have the main method to 
run the Spring Boot application.

--> @SpringBootApplication annotation 
includes Auto- Configuration, 
ComponentScan, and EnableAutoConfiguration.

-->@SpringBootApplication annotation is first annotation in
spring boot application, which indicate our spring Boot IOC 
container. 
it can manage entire spring boot appn life cycle.

--> @SpringBootApplication={@Configuration+
@ComponetScan+@EnableAutoConfiguration}

@Configuration: it is used to enable  java based configuaration 
in Spring boot application.

@ComponentScan: it is used to enable annotation based 
configuaration in Spring boot application.

@EnableAutoConfiguration: It auto-configures the bean that is 
present in the classpath and configures it to run the methods.

============================================================
After Run Spring application in console it can display
few information about Spring boot Projects

1. Spring Boot banner with version  (Spring Boot 3.2.5)
2. Spring Boot Java Version details  (jdk1.17)
3. Display Profiles information 
4. Display Server Details with port Number
5. display Timer (start time and end time)
6. Display Console Outputs (by using Runners).

===================================
Spring Boot Application
------------------------------
The entry point of the Spring Boot 
Application is the class contains 
@SpringBootApplication annotation. 
This class should have the main method to 
run the Spring Boot application. 
@SpringBootApplication annotation includes 
Auto- Configuration, Component Scan, 
and Spring Boot Configuration.









======================================================
@RequestMapping
===================
@RequestMapping is used to map the web requests. 
It has many optional elements like consumes, 
header, method, name, params, path, 
produces, and value. 
--> @RequestMapping use along with 
class level and method level also.

ex:
----
@Controller
//@RequestMapping
public class MyController
{
@RequestMapping(value="/home",method=RequestMethod.POST)
public String home()
{
return "name";
}
}




=====================================================
@ResponseBody
----------------
@ResponseBody: It binds the method return value to 
the response body. 
It tells the Spring Boot Framework to serialize 
a return an object into JSON and XML format in browser.
ex:
---
@Controller
public class MyController
{
@RequestMapping("/req1")
@ResponseBody
public String home()
{
return "Hello Spring Boot";
}
}
--> @ResponseBody Annotation is a Methods lovel Annotion




===========================================
@RequestParam
------------------------------------------
@RequestParam: It is used to extract the query 
parameters form the URL. 
--> @RequestParam annotation in a controller to 
read request parameters from forms for web applications. 
--> Read Single value from form elements and store into 
java variables in method parameter.

ex:
----
<form action="/req1">
Name:<input type="text" name="uname">
<input type="submit" value="Send">
</form>

@Controller
public class MyController
{
@RequestMapping("/req1")
public String name(@RequestParam String  uname,ModelMap model)
{
model.put("name",uname);
return "result";
}
}


==================================================
**** Model,ModelMap and ModelAndView class
--------------------------------------
--> Model,ModelMap and ModelAndView are used to define
a model in a spring MVC application.

Model defines a holder for model attributes and is 
primarily designed for adding attributes to the model.

--> ModelMap is an extention of Model with ability
to store attributes in a map and chain method calls.

-->ModelAndView is a holder for a model and view; 
it allows to return both model and view in one 
return  value--> {K:V} pair.

====================================================
Spring Boot Dev Tools
----------------------
Spring Boot Dev Tools stands for developer Tool. The aim of 
the mobule is to try  and improve the develoment time while
working with the spring boot application.
Spring boot DevTools pick up the changes and restart the
application.
So no need to stop and restart the server every time.
--> we can implements the DevTools in our
project by adding the following dependency
in pom.xml file

<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-dev-tools</artifactId>
<scope>runtime</scope>
</dependency>


============================================
POM.XML
============
1. POM stands for Project Oject Model.
2. pom is a XML file that contains information about
project and configuration details used by maven to build
the project.
3. pom used to configuare project dependencies
which one required for our project.
ex: .jar file informraion.
--> When executing a task or goal,
Maven looks for POM in the current directory.
It reads the POM ,gets the needed configuaration information
then executes the goals.

POM elements
-------------
Elements in th POM.xml
--> dependencies
--> developers and contributes
--> plugin lists (including reports)
--> plugin extentions with matching ids
--> plugin configuration
--> resources
------------------------------------------------
POM.XML
------
--> root directory of POM.xml file Xml tags
project  --> root
modelVersion  --> should be set to 4.0.0
gropuId:the id the prjects group
artifactId:the id  of artifact project
vesrion: the version of the artifact under the specified
group.
-------------------------------------------------------
Create a Spring boot REST api appliaction with H2 Data Base
=====================================================

1.ProductOrder.java  --> @Entity+@Id+@GeneratedValues
	 private int id;
    private String name;
    private String category;
    private String color;
    private double price;
2. ProductOrderRepo.java (I)--> @Repository
4. ProductOrderController.java -->(C) --> @RestController
5.application.properties--> portNocode+H2 Db conn statement
6.Application.java--> @SpringBootApplication
------------------------------------------------------------
Startes  Are
------------------------------------------------------------
1. Spring web
2. spring data jpa
3. Spring boot Dev Tools
4. H2 Data base
====================================
ProductOrder.java
=================
package com.excelr.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

@Entity
public class ProductOrder {

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	 private int id;
	    private String name;
	    private String category;
	    private String color;
	    private double price;
	    //PDC+PPC+PSM+PGM
		public ProductOrder() {
			super();
		}
		public int getId() {
			return id;
		}
		public void setId(int id) {
			this.id = id;
		}
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		public String getCategory() {
			return category;
		}
		public void setCategory(String category) {
			this.category = category;
		}
		public String getColor() {
			return color;
		}
		public void setColor(String color) {
			this.color = color;
		}
		public double getPrice() {
			return price;
		}
		public void setPrice(double price) {
			this.price = price;
		}
}


========================================
ProductOrderRepo.java
====================


package com.excelr.repo;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.excelr.model.ProductOrder;

@Repository
public interface ProductOrderRepo extends JpaRepository<ProductOrder, Integer> {

}
===============================================
application.properties
=======================
spring.application.name=999-SpringBootRESTWithH2DataBase

server.port:9000
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

=========================================================
OrderController.java
=================
package com.excelr.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.excelr.model.ProductOrder;
import com.excelr.repo.ProductOrderRepo;

@RestController
public class OrderController {

	
	@Autowired private ProductOrderRepo repo;
	
	@PostMapping("/save")
	public ProductOrder saveData(@RequestBody ProductOrder productOrder)
	{
		return repo.save(productOrder);
	}
	@GetMapping("get/{id}")
	public ProductOrder getOrder(@PathVariable int id) {
		ProductOrder getOne=repo.findById(id).get();
		return getOne;
	}
}

===========================================================


spring.application.name=999-SpringBootRESTWithH2DataBase

server.port:9000
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialec


















