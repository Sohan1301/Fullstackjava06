Set(I)
-----
1. set is a child interface of Collection Interface.
2. If we want to reprasents a group 
of indivisual objects as
a sinlge entity. where duplicates are not allowed and 
insertion order is not preserved (rondom order) then
we should go for Set Interface.
3. Set interface doesn't contain any new methods.
so we have to use only collection Interface methods Only.
=========================================================
ex: mobileNumbers, Adharcard Numbers, pancard numbers,
bank account Numbers..etc
ex:
---
Set s=new HashSet();
s.add(1);
s.add(2);
s.add(3);
a.add(1);

output
------
{1,2,3}
{2,3,1}
{3,1,2}
{3,2,1}
==============================================================
Set Interface Implemented classes
----------------------------------------------------
1. HashSet  	2. LinkedHashSet		3) TreeSet
-------------------------------------------------------------------------------------------------------
HashSet (C)
----------
1. HashSet class implemented in side the Set Interface
2. The underLying data structure is HashTable.
3. Duplicate are not allowed .if we are trying to insert duplicate we won't 
get any compile time error. but it can print unique values only.
4. Insertion order is not presered all object will be 
inserted based on hash-code of objects.
5. Hetrogenious objects are allowed.
6. null insertion is possible.
7. Implements serializable and clonable interfaces but not random access.
8. HashSet is the best choice. if our frequent operations are searching.
================================================================
Implemented Methods
----------------------------------
Constrcutors of HashSet
-------------------------------------
HashSet h=new HashSet();

--> h object allows 16 object only

1) HashSet h1=new HashSet();
--> create an empty Hashset object with default initail capacity
is 16 & default Fill Ration 0.75

2) HashSet h2=new HashSet(int intialCapacity);

--> Creates an empty Hashset object with specified initail  capacity
& Fill ratio 0.75

3) HashSet h2=new HashSet(int intialCapacity,float loadFactor);

--> Creates an empty Hashset object with specified initail  capacity
& specified Fill raio (Loadfactoy).

4).HashSet h2=new HashSet(Collection c);
--> for inter convertion bet weenCollection Objects
===========================================================================
Ex:
-----
types Set Object creaton
------------------------------------
1. Raw Type Object Creation
2. Generic Type creation with Wrapper classes
3. Generic Type with cutom class
============================================
Accessing Set Objects
-------------------------------
1. By using for and foreach Loop
2. Iterators
3. Listiterators
=============================================
ex:
----


---------------------------------------------------------------------------
import java.util.*;
public class HashSetExp {

	public static void main(String[] args) {
		HashSet<Integer> rollNos=new HashSet<>();
		rollNos.add(null);
		rollNos.add(101);
		rollNos.add(201);
		rollNos.add(301);
		rollNos.add(101);
		rollNos.add(null);
		rollNos.add(501);
		System.out.println(rollNos);
	}
}

=============================================================
Exp2:
----
Create Hashset object with generic Cutomized class
and add 5 objects
then acces with iterator
-------------------------------------------------------
Employee--> empId,empName,salary,designation,companyName
----------------------------------------------------------------------------------------------








-------------------------------------------------------
2. LinkedHashSet (C)
------------------------------------------------------
--> it is the child class of HashSet
--> The underlying data structure is HasTable+LinkedList 
(so it is a hybrid data structure).
--> It is Exactlty same as HashSet except Insertion Order
that Means Insertion Oder is Preserved.
Means Order follows.
========================================================
exp1:
=====
import java.util.*;
public class LinkedHashSetExpAppn {
	public static void main(String[] args) {
		LinkedHashSet<Integer> accountNos=new LinkedHashSet<>();
		accountNos.add(123);
		accountNos.add(456);
		accountNos.add(789);
		accountNos.add(987);
		System.out.println(accountNos);
	}
}
============================================================================
SortedSet (I)
-------------
--> it is a child interface of Set interface.
--> if we want to reparasents a group of individual objects according to
some sorting order and duplication are not allowed then we should go for 
SortedSet.

=============================================================
sortedset specific Methods
---------------------------------------------------------
1. first()--> return the first element of SortedSet
2. last()--> return the last element of SortedSet
3. headSet(Object o): returns the sortedset whose elements are <Obj.
4. tailSet(Object o): returns the sortedset whose elements are >Obj.
5. subSet(Object obj1,Object obj2)
--> returns the sortedset whose elements are >=obj1 and <obj2.
===================================================================
TreeSet (class)
-------------------------------------------------------------------
1. The underlying  data structure for TreeSet is Balanced Tree.
2. Duplicate Objects not allowed.
3. insertion order not preserved, but all objects will be inserted accoring to some sorting 
order.
****4. Homogenious elements only accepted.
if try to insert hetrogenious we will runtime error.
that is called "ClassCastException".
========================================================================
Note:
1. default natural sorting order for numbers Accending order and
for string Alphabetical order.
2. We can apply the above methods only on Sortedset implemented class
objects. that is on the TreeSet objects.
=======================================================================
TreeSet class constructors
-----------------------------------------------------------------------
1. TreeSet t1=new TreeSet();

--> Create an empty TreeSet objects where elements will be inserted according to
default natural sorting order.


2. TreeSet t1=new TreeSet(Comparator c);

--> Create an empty TreeSet objects where elements will be inserted according to
customized sorting order.

3.TreeSet t1=new TreeSet(SortedSet s);
4. TreeSet t1=new TreeSet(Collection c);
==========================================================================
import java.util.*;
public class HashSetExp {

	public static void main(String[] args) {
		HashSet<Integer> rollNos=new HashSet<>();
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter number of objects");
		int n=sc.nextInt();
		System.out.println("Enter number objects");
		for(int i=0; i<n; i++)
		{
			rollNos.add(sc.nextInt());
		}
		System.out.println(rollNos);
		System.out.println("===Listiterator==========");
		Iterator<Integer> it=rollNos.iterator();
		while(it.hasNext())
		{
			
			System.out.
			
			println(it.next());
		}
		System.out.println("===For Each Loop==========");
		for(Integer rollNo:rollNos)
		{
			System.out.println(rollNo);
		}
	}
}

=============================================================
Comparator(I)
------------
--> we can use commparator to define our own sorting (Costomized sorting).
--> Comparator inteface presents in java.util.Packge
--> It defines two methods ie. compare and equall
1) public int compare(Object ob1,Object ob2)
      --> returns -ve --> if obj1 has to come before obj2.
 	--> returns +ve --> if obj1 has to come after obj2.
 	--> returns 0 --> if obj1 & obj2 both are equals.
2) public boolean equals();

=======================================================================

import java.util.*;
public class TreeSetComparatorExp {

	public static void main(String[] args) {
		TreeSet t1=new TreeSet();
		t1.add("A");
		t1.add("a");
		t1.add("B");
		t1.add("T");
		System.out.println(t1);
	System.out.println("A".compareTo("a"));
	System.out.println("a".compareTo("A"));
	System.out.println("A".equals("A"));
	Iterator itr=t1.descendingIterator();
	while(itr.hasNext())
	{
		System.out.println(itr.next());
	}
	}
}

==============================================
 import java.util.*;    
  public class TestSort1{    
  public static void main(String args[]){    
  ArrayList<Student> al=new ArrayList<Student>();    
  al.add(new Student(101,"Vijay",23));    
  al.add(new Student(106,"Ajay",27));    
  al.add(new Student(105,"Jai",21));   
/Sorting elements on the basis of name  
  Comparator<Student> cm1=Comparator.comparing(Student::getName);  
   Collections.sort(al,cm1);  
   System.out.println("Sorting by Name");  
   for(Student st: al){  
     System.out.println(st.rollno+" "+st.name+" "+st.age);  
     }  
   //Sorting elements on the basis of age  
    Comparator<Student> cm2=Comparator.comparing(Student::getAge);  
Collections.sort(al,cm2);  
   System.out.println("Sorting by Age");  
   for(Student st: al){  
     System.out.println(st.rollno+" "+st.name+" "+st.age);  
     }    
  }    
  }    
=================================
Comparable Interface
-------------------------------
--> The interface presents in java.lang  package it caontaine one method
only i,e compareTo()

1. public int compareTo(Object obj)

obj1.compareTo(obj2)
------------------------------
	 --> returns -ve --> if obj1 has to come before obj2.
 	--> returns +ve --> if obj1 has to come after obj2.
 	--> returns 0 --> if obj1 & obj2 both are equals.
============================================================
=====================================================================

Map(I)
-----
1. situatation to use map
2. map interface implemented classes
3.Hierarchy of map interface and its classes
4.comman features of implementd classes
5.specifis features of implemented classes
6.ways of object creation for implemented classes
7. sample program for map Interface
==========================================
Map(I):
---------
--> when you objcets create with key and value pair then go with MAP interface
--> here key and value reparasents with entry.
--> rules
1. in map key must be unique
2. value can be duplicated
3. as a key and value we can use any generics types
that means as a key and value we can use int, float,char and string values also.
-----------------------------------------------------------------------------------------------------------------
Map Interface Common Implemented mathods
-----------------------------------------
1. put(Object key,Object value)
2. putAll(Map m)
3. get(Object key): return the value if key is prasent in given map object.
4. remove(object key): if key is prasent that value can be removed
5. containsKey(Object key)
6. containsValue(Object value)
7.isEmpty()
8.size()
9. clear();
------------------------------------------------------
Map interface implemented classes
------------------------------------------------------
1. HashMap: here providing map object not in order.
2. LinkedHashMap: here map follows the insertion order
3. TreeMap: here map object takes in sorting order.
======================================================
exp1: HashMap
-------------
Map<Integer,String> map=new HaspMap<>();
-----------------------------------------
import java.util.*;
public class MapHashMapExp1 {

	public static void main(String[] args) {
		Map<Integer,String> map=new HashMap<>();
		map.put(101,"Raju");
		map.put(104, "Ram");
		map.put(102, "Mourya");
		map.put(103, "sandeep");
		System.out.println(map);
		System.out.println(map.get(101));
		Map<Integer,String> map2=new HashMap<>();
		map2.put(201,"dilip");
		map2.put(204, "Ravi");
		map2.put(202, "Suman");
		map2.put(201, "sai ram");
		System.out.println(map2);
		map.putAll(map2);
		System.out.println(map);	
	}
}


====================================================
2. Exp2: LinkedHashMap---> 
Provide map objects values from keybpard
===========================================================
Map<Integer,String> students=new LinkedHashMap<>();


==================================================
accessing Map Object Values
-------------------------------------------------
1. foreach-loop
----------------
Map.Entry(I)
-----------
--> it is sub interface of Map(I).
--> it can provide specific methods to access map objects values
like getKey(),getValue()...ect

1) getKey(): if key is exist key name will print.
2) getValue(): print the value.
3)hashCode() : print object address
4) setValue(): replace value corresponding to this enrty with specified 
			value.
5) equals(): compare two objects.
=======================================================
exp1:
----




















======================================================
create a map object with Generic with Cusomized class
-----------------------------------------------------
Movies:
------
movie_id;
hero_names;
ratings;
moviesNames<movieName,directorName>
year;
--------------------------------------------
1.print director names with MovieNames?
2.  

















 





































































 












































