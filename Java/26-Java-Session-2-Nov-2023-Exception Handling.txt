Java try Multi catch block
-----------------------------
If you have to perform different tasks at the occurrence of different 
Exceptions, use java try  multi catch block.

syntax:
-----
try
{
// criticale statements that might be thrown
}
catch(Excep_class_name ref)
{
stmt1;
}
catch(Excep_class_name ref)
{
stmt2;
}



exp3:
-----
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package String;

/**
 *
 * @author Yakub
 */
public class Exp1 
{
    public static void main(String args[])
    {
        try
        {
            int n1=10/0;
        int x[]={10,20,30,40,50};
        System.out.println(x[5]);
         System.out.println(n1);
        }
        catch(ArrayIndexOutOfBoundsException ex)
        {
            System.out.println(ex);
        }
        
        catch(ArithmeticException ex)
        {
           System.out.println(ex); 
        }
        System.out.println("Am the last statement");
    }
}


+++++++++++++++++++++++++++++++++++++
nested try
===============
we can arrange try catch one inside another also
that is known as nested try 

Syntax:=
----------
try
{
   try
   {
	// Nested try block code
   }
	catch(EXp_class ref){ stmt1; }
}
cctch(Exp2 ref)(stmt2; }


--------------------------------------------
Exp3:

-----
-->netsed  try-catch



public class ExceptionEx 
{
    public static void main(String args[])
    {
    try
    {
        try
        {
        int r=20/0;
        System.out.println("My r value="+r);
        }
        catch(ArithmeticException ex1)
        {
            System.out.println(ex1);
        }
       int x[]={10,20,30,40,50};
       System.out.println(x[0]);
       System.out.println(x[5]);
    }
        catch(ArrayIndexOutOfBoundsException ex)
        {
            System.out.println(ex);
        }
        
        System.out.println("This is the last statement");   
    }
}



try-catch
try-multi catch
nested try catch
+++++++++++++++++++++++++++++++++++++++++++++++++++++++
Java finally block
------------------
--> is a block that is used to execute important code such as closing connection, 
stream etc.

Java finally block is always executed whether exception is handled or not.
Java finally block must be followed by try or catch block.

1. try -  finally :       java is robust : 
2. try-catch- finally



eg1:
--------
import java.lang.*;
public class Exp1
{
    public static void main(String args[])
    {
       
            try
            {
                int x[]={10,20,30,40,50};
                System.out.println(x[5]);
            }
            finally
            {
            
        System.out.println("Am the last statement");
    }
}
}


++++++++++++++++++++++++++++++++++++++++++++++
exp4:
=======

public class Exp1 
{
    public static void main(String args[])
    {
            try
            {
                int x[]={10,20,30,40,50};
                System.out.println(x[5]);
            }
            catch(ArrayIndexOutOfBoundsException ref)
            {
                System.out.println(ref);
            }
            finally
            {
        System.out.println("Am the last statement");
            }
    }
}


-------------------
Java throw keyword
-------------------
The Java throw keyword is used to explicitly throw an exception. 

We can throw either checked or uncheked exception in java 
by throw keyword. The throw keyword is mainly 
used to throw custom exception. At variable declaration level only.
---------------------------------

int x=90;  javac 
object x=90;  java




public class Exp2
{
    static void validate(int age)
    {
        if(age<18)
        {
            //System.out.println("not Valid for Vote");
            throw new ArithmeticException("Not valid");
        }
        else  
        {
            System.out.println("Valid for Vote");
        }
    }
    public static void main(String args[])
    {
        validate(21);
        System.out.println("Rest of code also executed");
    }
}

-----------------------------------------------------------
Throws-- use along with methods for checked exception
------------
import java.io.*;
import java.lang.*;
public class Exp2 
{ 
    static int id;
    static String name;
   static void m1()throws IOException    
    {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        System.out.println("Eneter id and name values");
        id=Integer.parseInt(br.readLine());
        name=br.readLine();   
    }
    void m2()
    {
        System.out.println(id+"\t"+name);
    }
    public static void main(String args[])throws IOException
    {
        Exp2 ee=new Exp2();
        m1();
        ee.m2();
    }
}

========================================================
--> when we are removing run time error in our java code insted of specipic class we can
use Exception class also
bcz
here Exception class is base class of remaing Exception handling classes.
 

import java.io.*;
public class Emp1 
{
    int eid;
    String ename;
    float esal;
    Emp1()throws IOException
    {
       System.out.println("Enter eid,ename and esal values");
       BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
     eid=Integer.parseInt(br.readLine());
     ename=br.readLine();
     esal=Float.parseFloat(br.readLine());
    }
    void print()
    {
        System.out.println(eid+"\t"+ename+"\t"+esal);
    }
    public static void main(String args[])throws IOException
    {
        Emp1 e=new Emp1();
        e.print();
    }
}


-------------------------------
Checked Exception List
------------------------
---------------------> throws 
Exception
IOException
FileNotFoundException
ParseException  
ClassNotFoundException  
CloneNotSupportedException
InstantiationException
InterruptedException
NoSuchMethodException
NoSuchFieldException
SQLException

----------------------------
conclusion
----------------
1. what is error?
2. types of errors?
3. exception handling
4. Exception handling classes
5. exception handling methods

try-catch
try multicatch
nested try catch

try finally
try catch finally
throw
throws
----------------------------------------
